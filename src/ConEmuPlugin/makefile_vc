
.SILENT:

NAME=ConEmu
DIRNAME=$(NAME)Plugin
RELEASEDIR=..\..\Release\plugins\ConEmu
NEEDENTRY = 1
USE_PDB = 1
NO_OPTIMIZE = 1
NEEDDEFLIB = 1

!include ../makefile_vc_defs

USERLIBS = kernel32.lib user32.lib gdi32.lib advapi32.lib shell32.lib version.lib

DEF_NAME = export.release

!if defined(AMD64) || "$(CPU)" == "AMD64"
OUTNAME = ConEmu.x64
!else
OUTNAME = ConEmu
!endif


LINK_OBJS = \
$(INTDIR)\CEStr.obj \
$(INTDIR)\CmdLine.obj \
$(INTDIR)\Common.obj \
$(INTDIR)\ConEmuCheck.obj \
$(INTDIR)\ConEmuCheckEx.obj \
$(INTDIR)\ConEmuInjects.obj \
$(INTDIR)\ConEmuPlugin.obj \
$(INTDIR)\ConEmuPlugin1900.obj \
$(INTDIR)\ConEmuPlugin2800.obj \
$(INTDIR)\ConEmuPlugin995.obj \
$(INTDIR)\ConEmuPluginA.obj \
$(INTDIR)\ConEmuPluginBase.obj \
$(INTDIR)\EmergencyShow.obj \
$(INTDIR)\Execute.obj \
$(INTDIR)\HkFunc.obj \
$(INTDIR)\MAssert.obj \
$(INTDIR)\Memory.obj \
$(INTDIR)\Monitors.obj \
$(INTDIR)\MProcess.obj \
$(INTDIR)\MSection.obj \
$(INTDIR)\MSectionSimple.obj \
$(INTDIR)\MSecurity.obj \
$(INTDIR)\MSetter.obj \
$(INTDIR)\MStrDup.obj \
$(INTDIR)\MStrSafe.obj \
$(INTDIR)\PluginBackground.obj \
$(INTDIR)\PluginSrv.obj \
$(INTDIR)\SetEnvVar.obj \
$(INTDIR)\WConsole.obj \
$(INTDIR)\WFiles.obj \
$(INTDIR)\WModuleCheck.obj \
$(INTDIR)\WObjects.obj \
$(INTDIR)\WThreads.obj \
$(INTDIR)\WUser.obj


RC_NAME=$(NAME)

#COMMON = ..
COMINC = ..
EXT = dll
DLLNAME = $(OUTNAME).$(EXT)
DLLFULLNAME = $(OUTDIR)$(ADDOUTDIR)\$(DLLNAME)
DEF = $(DEF_NAME).def
MAP = $(OUTDIR)$(ADDOUTDIR)\$(OUTNAME).map
PDB = $(OUTDIR)$(ADDOUTDIR)\$(OUTNAME).Plugin.pdb
RES = $(INTDIR)\$(NAME).res

!ifdef VC8
COMPAT64=/Wp64
NOWIN98=/OPT:NOWIN98
!endif


!ifndef DEBUG
CPP_OPT=$(CPP_OPT) /DNDEBUG /Fd$(PDB) /DHIDE_TODO
# /DCRTSTARTUP
!else
CPP_OPT=$(CPP_OPT) /DDEBUG /Fd$(PDB)
# /DCRTSTARTUP
!endif


!if "$(USE_PDB)" == "1"
LINK_DEBUG=/MAP:"$(MAP)" /DEBUG /PDB:$(PDB)
CPP_DEBUG=/Zi
!else
LINK_DEBUG=/MAP:"$(MAP)" /PDB:$(PDB)
CPP_DEBUG=
!endif

#COMMONLIB=

!ifdef AMD64
CPP_PROJ_NO=/nologo /c /W3 /wd4995 /Gy /GF /Zp8 /J $(COMPAT64) /GS- /Gr /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
#COMMONLIB = ../common/libCRT64.lib chkstk.obj
ULOUT=-Tpd+
LINK_MACHINE = /MACHINE:X64
!elseif defined(IA64)
CPP_PROJ_NO=/nologo /c /W3 /wd4995 /Gy /GF /Zp8 /J $(COMPAT64) /GS- /Gr /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
#COMMONLIB = ../common/libCRTIA64.lib chkstk.obj
ULOUT=-Tpd+
LINK_MACHINE = /MACHINE:X64
!else
#COMMONLIB = ../common/libCRT.lib chkstk.obj
#../pvdCRT.lib
!ifdef CPP_UNALIGN
CPP_ALIGN=/Zp1
!endif
# /I"$(COMMON)"
CPP_PROJ_NO=/nologo /c /W3 /wd4995 /Gy /GF $(CPP_ALIGN) /J /Gr /GS- /GR- /EHs-c- /LD /I"$(COMINC)" $(ENV_INC_OPT) $(CPP_WIDE) /D_CRT_SECURE_NO_WARNINGS /D_CRT_NONSTDC_NO_WARNINGS /D_CRT_NON_CONFORMING_SWPRINTFS /D_WIN32_WINNT=0x0500 $(USERCPP)
ULOUT=-Tpd -Re
LINK_MACHINE = /MACHINE:X86
!endif
CPP_PROJ=$(CPP_PROJ_NO) /Fo"$(INTDIR)\\"

LIBS = $(CRTLIB) $(USERLIBS)

!ifdef _BIN_PATH_
!ifndef _CL_PATH_
_CL_PATH_=$(_BIN_PATH_)
!endif
!ifndef _RC_PATH_
_RC_PATH_=$(_BIN_PATH_)
!endif
!ifndef _LINK_PATH_
_LINK_PATH_=$(_BIN_PATH_)
!endif
!endif


LNK=$(_LINK_PATH_)link.exe
LINK_FLAGS=/NOLOGO /SUBSYSTEM:WINDOWS /DYNAMICBASE /DLL /RELEASE $(LINK_MACHINE) $(NOWIN98) $(ENV_LIB_OPT) /DEF:"$(DEF)" /OUT:"$(DLLFULLNAME)" $(LINK_DEBUG)


CFLAGS = $(MP) $(CPP_PROJ) $(CPP_DEBUG) $(CPP_OPT)

!ifndef CC
CC=$(_CL_PATH_)cl.exe
!endif

!ifndef LIBR
LIBR=$(_LINK_PATH_)lib.exe
!endif

!ifndef RC
RC=$(_RC_PATH)rc.exe
!endif

!if !defined(SRC_PATHS_DEFINED) && defined(__MAKE__)
SRC_PATHS=.;..\common
.path.cpp=$(SRC_PATHS)
.path.c=$(SRC_PATHS)
.path.hpp=$(SRC_PATHS)
.path.h=$(SRC_PATHS)
.path.rc=$(SRC_PATHS)
.path.def=$(SRC_PATHS)
!endif

ALL: dirs $(INSTALL) $(DLLFULLNAME) clean

$(DLLFULLNAME) : $(LINK_OBJS) $(RES) $(LINK_DEP)
	@echo $(CLR_BRN)linking $@ :: $(LINK_FLAGS) $(LIBS)$(CLR_STD)
	$(LNK) @<<
	$(LINK_FLAGS) $(LIBS) $(LINK_OBJS) $(RES)
<<

!ifndef __MAKE__
.cpp{$(INTDIR)}.obj::
	@$(CC) @<<
	$(CFLAGS) $<
<<
{../common/}.cpp{$(INTDIR)}.obj::
	$(CC) @<<
	$(CFLAGS) $<
<<
{../ConEmuC/}.cpp{$(INTDIR)}.obj::
	$(CC) @<<
	$(CFLAGS) $<
<<
!else
.cpp{$(INTDIR)}.obj:
	@$(CC) $(CFLAGS) { $< } 

{../common/}.cpp{$(INTDIR)}.obj:
	@$(CC) $(CFLAGS) { $< } 

{../ConEmuC/}.cpp{$(INTDIR)}.obj:
	@$(CC) $(CFLAGS) { $< } 

!endif

$(RES): $(RC_NAME).rc
	@$(RC) /I"$(COMINC)" $(ENV_INC_OPT) $(RC_WIDE) /fo"$(RES)" $(RC_NAME).rc

.PHONY: dirs
dirs:
!ifdef INSTALL
	@if not exist "$(WORKDIR)\$(NULL)" mkdir "$(WORKDIR)"
!endif
	@if not exist "$(INTDIR)\$(NULL)" mkdir "$(INTDIR)"
	@if not exist "$(OUTDIR)\$(NULL)" mkdir "$(OUTDIR)"
	@if not exist "$(OUTDIR)$(ADDOUTDIR)\$(NULL)" mkdir "$(OUTDIR)$(ADDOUTDIR)"

.PHONY: clean
clean:
	@echo $(CLR_MOD)Copying release files$(CLR_STD)
	@if not exist "$(RELEASEDIR)\$(NULL)" mkdir "$(RELEASEDIR)"
	@echo moving `$(DLLFULLNAME)` to `$(RELEASEDIR)`
	@move $(DLLFULLNAME) $(RELEASEDIR) > nul
!ifdef USE_PDB
	@echo moving `$(PDB)` to `$(RELEASEDIR)`
	@move $(PDB) $(RELEASEDIR) > nul
!else
	@if exist $(PDB) del $(PDB)
!endif
	@echo moving `$(MAP)` to `$(RELEASEDIR)`
	@move $(MAP) $(RELEASEDIR) > nul



################
#LINK_OBJS begin

$(INTDIR)\CEStr.obj: ../common/CEStr.cpp ../common/CEStr.h

$(INTDIR)\CmdLine.obj: ../common/CmdLine.cpp

$(INTDIR)\Common.obj: ../common/Common.cpp

$(INTDIR)\ConEmuCheck.obj: ../common/ConEmuCheck.cpp

$(INTDIR)\ConEmuCheckEx.obj: ../common/ConEmuCheckEx.cpp

$(INTDIR)\ConEmuInjects.obj: ConEmuInjects.cpp

$(INTDIR)\ConEmuPlugin.obj: ConEmuPlugin.cpp

$(INTDIR)\ConEmuPlugin1900.obj: ConEmuPlugin1900.cpp

$(INTDIR)\ConEmuPlugin2800.obj: ConEmuPlugin2800.cpp

$(INTDIR)\ConEmuPlugin995.obj: ConEmuPlugin995.cpp

$(INTDIR)\ConEmuPluginA.obj: ConEmuPluginA.cpp

$(INTDIR)\ConEmuPluginBase.obj: ConEmuPluginBase.cpp ConEmuPluginBase.h

$(INTDIR)\EmergencyShow.obj: ../common/EmergencyShow.cpp ../common/EmergencyShow.h

$(INTDIR)\Execute.obj: ../common/execute.cpp

$(INTDIR)\HkFunc.obj: ../common/HkFunc.cpp ../common/HkFunc.h

$(INTDIR)\MAssert.obj: ../common/MAssert.cpp

$(INTDIR)\Memory.obj: ../common/Memory.cpp

$(INTDIR)\Monitors.obj: ../common/Monitors.cpp

$(INTDIR)\MProcess.obj: ../common/MProcess.cpp ../common/MProcess.h ../common/MToolHelp.h

$(INTDIR)\MSection.obj: ../common/MSection.cpp ../common/MSection.h

$(INTDIR)\MSectionSimple.obj: ../common/MSectionSimple.cpp ../common/MSectionSimple.h

$(INTDIR)\MSetter.obj: ../common/MSetter.cpp ../common/MSetter.h

$(INTDIR)\MStrDup.obj: ../common/MStrDup.cpp ../common/MStrDup.h

$(INTDIR)\MStrSafe.obj: ../common/MStrSafe.cpp

$(INTDIR)\PluginBackground.obj: PluginBackground.cpp

$(INTDIR)\PluginSrv.obj: PluginSrv.cpp ../common/PipeServer.h

$(INTDIR)\SetEnvVar.obj: ../common/SetEnvVar.cpp

$(INTDIR)\WConsole.obj: ../common/WConsole.cpp

$(INTDIR)\WFiles.obj: ../common/WFiles.cpp ../common/WFiles.h

$(INTDIR)\WModuleCheck.obj: ../common/WModuleCheck.cpp ../common/WModuleCheck.h

$(INTDIR)\WObjects.obj: ../common/WObjects.cpp

$(INTDIR)\WThreads.obj: ../common/WThreads.cpp ../common/WThreads.h

$(INTDIR)\WUser.obj: ../common/WUser.cpp

#LINK_OBJS end
##############
